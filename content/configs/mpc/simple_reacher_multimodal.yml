# 该参数在 2D 左右实验以及 上下实验两个点位中 取得较好的结果

use_cuda: True
cuda_device_num: 0

control_dt: 0.085
control_space: 'acc'
float_dtype: 'float32'
state_filter_coeff: 1.0
cmd_filter_coeff: 1.0

model:
  # any link that is not specified as learnable will be initialized from urdf
  #urdf_path: "urdf/franka_description/franka_panda_no_gripper.urdf"
  #learnable_rigid_body_config:
  #  learnable_links: []
  #name: "franka_panda"
  dt: 0.0
  max_action: 0.10 # 0.1
  # max_action: 0.1 # for parallel mppi

  dt_traj_params:
    base_dt: 0.08
    base_ratio: 0.5
    max_dt: 0.12
  init_state: [0.0,0.0]
  position_bounds: [[0.0, 1], [0.0,1]]
  
cost:
  goal_state:
    vec_weight: [1.0, 1.0]
    weight: 10.0
    gaussian_params: {'n':0, 'c':0.2, 's':0.0, 'r':10.0}
    # use for DDPG SAC
    # vec_weight: [1.0, 1.0]
    # weight: 1.0
    # gaussian_params: {'n':0, 'c':0.0, 's':0.0, 'r':10.0} # turn 'c' to zero

  image_move_collision: # on robot acceleration
    weight: 2.0 # 不宜过大 过大跟sdf 置为1 没区别了
    vec_weight: [10.0, 80.0]
    gaussian_params: {'n':0, 'c':1.0, 's':0, 'r':10.0}
    # gaussian_params: {'n':0, 'c':0.0, 's':0, 'r':10.0}
    collision_file: 'collision_maps/collision_map_cem.png'
    dist_thresh: 0.01
    

  sparse_reward:
    vec_weight: [1.0, 1.0]
    weight: 1.0
    sigma : 0.03 # 0.03 ——》 0.05 拓宽陷落半径



  stop_cost:
    weight: 20.0
    max_nlimit: 0.02 #0.2
    gaussian_params: {'n':0, 'c':0.2, 's':0, 'r':10.0}
    
  stop_cost_acc:
    weight: 0.0
    max_limit: 0.01 #0.2
    gaussian_params: {'n':0, 'c':0.2, 's':0, 'r':10.0}
    

  image_collision: # on robot acceleration
    weight: 0.0 
    gaussian_params: {'n':0, 'c':1.0, 's':0, 'r':10.0}
    # gaussian_params: {'n':0, 'c':0.0, 's':0, 'r':10.0}
    collision_file: 'collision_maps/collision_map_cem.png'
    dist_thresh: 0.03

  
  state_bound:
    weight: 1000.0 
    gaussian_params: {'n':0, 'c':1.0, 's':0, 'r':10.0}

  terminal:
    weight: 0.0
    gaussian_params: {'n':0, 'c':1.0, 's':0, 'r':10.0}

 
# multimodal_cost:
  # switch_on: False
  # # switch_on: True # 目的是上面single的权重归一 隔离好
  # target_cost:
  #   greedy_weight: 20.0 
  #   sensi_weight: 1.0
  #   judge_weight: 5.0

  # coll_cost: 
  #   greedy_weight: 1.0
  #   sensi_weight: 5.0
  #   judge_weight: 3.0

  # terminal_reward:
  #   greedy_weight: 5.0
  #   sensi_weight: 0.0
  #   judge_weight: 0.4 

multimodal_cost:         
  switch_on: True
  target_cost:
    greedy_weight: 40.0
    sensi_weight: 5.0
    judge_weight: 10.0

  coll_cost: 
    greedy_weight: 1.0
    sensi_weight: 3.0
    judge_weight: 1.2

  terminal_reward:
    greedy_weight: 20.0
    sensi_weight: 0.0
    judge_weight: 1.0


multimodal:
  top_traj_select: 20
  random_shoot_particles: {'sensi_random': 30, 'greedy_random': 30, 'sensi_mean': 50, 'greedy_mean': 50}



mppi:
  horizon           : 20 # 20
  init_cov          : 0.01 #.5
  gamma             : 0.98 #
  n_iters           : 1
  step_size_mean    : 0.9
  step_size_cov     : 0.6
  beta              : 1.0
  alpha             : 1
  num_particles     : 360 #10000
  update_cov        : True
  cov_type          : 'diag_AxA' # 
  kappa             : 0.0001
  null_act_frac     : 0.01
  sample_mode       : 'mean'
  base_action       : 'repeat'
  squash_fn         : 'clamp' # [clamp,]
  hotstart          : True
  visual_traj       : 'state_seq'
  sample_params:
    type: 'multiple'
    fixed_samples: True
    sample_ratio: {'halton':0.0, 'halton-knot':1.0, 'random':0.0, 'random-knot':0.0}
    seed: 0
    filter_coeffs: None #[0.5, 0.3, 0.2]
    knot_scale: 5
    #filter_coeffs: [1.0, 0.0, 0.0]

